package leetcode.editor.cn;

import leetcode.editor.cn.entity.TreeNode;

import java.util.LinkedList;

/**
 * È¢òÁõÆÔºöÂú®‰∫åÂèâÊ†ë‰∏≠Â¢ûÂä†‰∏ÄË°å
 * È¢òÁõÆÁºñÂè∑Ôºö623
 * Êó∂Èó¥Ôºö2023-09-02 12:35:56
 * ÈÄöËøáÔºötrue
 */
public class AddOneRowToTree {
    public static void main(String[] args) {
        Solution solution = new AddOneRowToTree().new Solution();
//      LeetCodeUtils.array2Tree()
        //         // [4,2,6,3,1,5]
        // [5,3,1,null,null,4,null,null,2]
        TreeNode root = new TreeNode(5);
        TreeNode treeNode3 = new TreeNode(3);
        TreeNode treeNode1 = new TreeNode(1);
        TreeNode treeNode4 = new TreeNode(4);
        TreeNode treeNode2 = new TreeNode(2);
//      TreeNode treeNode5 = new TreeNode(5);

        root.left = treeNode3;
        root.right = treeNode1;

        treeNode1.left = treeNode4;
        treeNode4.right = treeNode2;

//      treeNode2.left = treeNode3;
//      treeNode2.right = treeNode1;
//      treeNode6.left = treeNode5;

        solution.addOneRow(root, 2, 4);


    }
    //leetcode submit region begin(Prohibit modification and deletion)

    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
class Solution {
    public TreeNode addOneRow(TreeNode root, int val, int depth) {
        if (depth == 1 || root == null) {
            return new TreeNode(val, root, null);
        }
        LinkedList<TreeNode> nodes = new LinkedList<>();
        nodes.offerFirst(root);
        while (!nodes.isEmpty()) {
            int size = nodes.size();
            if (--depth == 1) {
                for (int i = 0; i < size; i++) {
                    TreeNode pop = nodes.pollLast();
                    assert pop != null;
                    pop.left = pop.left == null ? new TreeNode(val) : new TreeNode(val, pop.left, null);
                    pop.right = pop.right == null ? new TreeNode(val) : new TreeNode(val, null, pop.right);
                }
                break;
            } else {
                for (int i = 0; i < size; i++) {
                    TreeNode pop = nodes.pollLast();
                    assert pop != null;
                    if (pop.left != null) nodes.offerFirst(pop.left);
                    if (pop.right != null) nodes.offerFirst(pop.right);
                }
            }
        }
        return root;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}


//ÁªôÂÆö‰∏Ä‰∏™‰∫åÂèâÊ†ëÁöÑÊ†π root Âíå‰∏§‰∏™Êï¥Êï∞ val Âíå depth ÔºåÂú®ÁªôÂÆöÁöÑÊ∑±Â∫¶ depth Â§ÑÊ∑ªÂä†‰∏Ä‰∏™ÂÄº‰∏∫ val ÁöÑËäÇÁÇπË°å„ÄÇ 
//
// Ê≥®ÊÑèÔºåÊ†πËäÇÁÇπ root ‰Ωç‰∫éÊ∑±Â∫¶ 1 „ÄÇ 
//
// Âä†Ê≥ïËßÑÂàôÂ¶Ç‰∏ã: 
//
// 
// ÁªôÂÆöÊï¥Êï∞ depthÔºåÂØπ‰∫éÊ∑±Â∫¶‰∏∫ depth - 1 ÁöÑÊØè‰∏™ÈùûÁ©∫Ê†ëËäÇÁÇπ cur ÔºåÂàõÂª∫‰∏§‰∏™ÂÄº‰∏∫ val ÁöÑÊ†ëËäÇÁÇπ‰Ωú‰∏∫ cur ÁöÑÂ∑¶Â≠êÊ†ëÊ†πÂíåÂè≥Â≠êÊ†ëÊ†π„ÄÇ 
// cur ÂéüÊù•ÁöÑÂ∑¶Â≠êÊ†ëÂ∫îËØ•ÊòØÊñ∞ÁöÑÂ∑¶Â≠êÊ†ëÊ†πÁöÑÂ∑¶Â≠êÊ†ë„ÄÇ 
// cur ÂéüÊù•ÁöÑÂè≥Â≠êÊ†ëÂ∫îËØ•ÊòØÊñ∞ÁöÑÂè≥Â≠êÊ†ëÊ†πÁöÑÂè≥Â≠êÊ†ë„ÄÇ 
// Â¶ÇÊûú depth == 1 ÊÑèÂë≥ÁùÄ depth - 1 Ê†πÊú¨Ê≤°ÊúâÊ∑±Â∫¶ÔºåÈÇ£‰πàÂàõÂª∫‰∏Ä‰∏™Ê†ëËäÇÁÇπÔºåÂÄº val ‰Ωú‰∏∫Êï¥‰∏™ÂéüÂßãÊ†ëÁöÑÊñ∞Ê†πÔºåËÄåÂéüÂßãÊ†ëÂ∞±ÊòØÊñ∞Ê†πÁöÑÂ∑¶Â≠êÊ†ë„ÄÇ 
// 
//
// 
//
// Á§∫‰æã 1: 
//
// 
//
// 
//ËæìÂÖ•: root = [4,2,6,3,1,5], val = 1, depth = 2
//ËæìÂá∫: [4,1,1,2,null,null,6,3,1,5] 
//
// Á§∫‰æã 2: 
//
// 
//
// 
//ËæìÂÖ•: root = [4,2,null,3,1], val = 1, depth = 3
//ËæìÂá∫:  [4,2,null,1,1,3,null,null,1]
// 
//
// 
//
// ÊèêÁ§∫: 
//
// 
// ËäÇÁÇπÊï∞Âú® [1, 10‚Å¥] ËåÉÂõ¥ÂÜÖ 
// Ê†ëÁöÑÊ∑±Â∫¶Âú® [1, 10‚Å¥]ËåÉÂõ¥ÂÜÖ 
// -100 <= Node.val <= 100 
// -10‚Åµ <= val <= 10‚Åµ 
// 1 <= depth <= the depth of tree + 1 
// 
//
// Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ ‰∫åÂèâÊ†ë üëç 205 üëé 0
