## 模拟

根据题意，只有给定数字 $x$ 本身从高位到低位是「非严格降序」时，我们无法找到一个合法值。

首先，我们可以先对 $x$ 诸位取出，存成 `nums` 数组（数组的首位元素为原数 $x$ 的最低位）。

然后尝试找到第一个能够交换的位置 `idx`（若无法找到，说明不存在合法值，返回 $-1$），即从 $nums[0]$（原始 $x$ 的最低位）开始找，找到第一个「降序」的位置 `idx`，然后从 $[0, idx)$ 范围内找一个比 $nums[idx]$ 要大的最小数与其进行互换，也是从 $nums[0]$ 开始找，找到第一个满足比 $nums[idx]$ 大的数。

当互换完成后，此时比 $x$ 要大这一目标已由第 `idx` 位所保证（后续的排序应该按照从小到大放置），同时互换结束后的 $[0, idx)$ 仍然满足「非严格升序」特性，因此我们可以对其运用「双指针」进行翻转。

代码：

* []

```Java
class Solution {
    public int nextGreaterElement(int x) {
        List<Integer> nums = new ArrayList<>();
        while (x != 0) {
            nums.add(x % 10);
            x /= 10;
        }
        int n = nums.size(), idx = -1;
        for (int i = 0; i < n - 1 && idx == -1; i++) {
            if (nums.get(i + 1) < nums.get(i)) idx = i + 1;
        }
        if (idx == -1) return -1;
        for (int i = 0; i < idx; i++) {
            if (nums.get(i) > nums.get(idx)) {
                swap(nums, i, idx);
                break;
            }
        }
        for (int l = 0, r = idx - 1; l < r; l++, r--) swap(nums, l, r);
        long ans = 0;
        for (int i = n - 1; i >= 0; i--) ans = ans * 10 + nums.get(i);
        return ans > Integer.MAX_VALUE ? -1 : (int)ans;
    }
    void swap(List<Integer> nums, int a, int b) {
        int c = nums.get(a);
        nums.set(a, nums.get(b));
        nums.set(b, c);
    }
}
```

* 时间复杂度：$O(\log{n})$
* 空间复杂度：$O(\log{n})$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
